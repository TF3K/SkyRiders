generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model User {
  id              String                 @id @default(cuid())
  name            String?
  email           String                 @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  role            UserRole               @default(USER)
  accounts        Account[]
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  isTwoFacEnabled Boolean                @default(false)
  TwoFacConfirm   TwoFactorConfirmation?
  orders          Order[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  price       Float
  category    String
  inStock     Boolean
  description String
  image       String
  createdAt   DateTime @default(now())
}

enum UserRole {
  ADMIN
  USER
}

model Order {
  id                String    @id @default(uuid())
  pricePaidInCents  Int
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userId            String
  productId         String
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product           Product   @relation(fields: [productId], references: [id], onDelete: Restrict)
}

model DownloadNotification {
  id                String  @id @default(uuid())
  expiresAt         DateTime
  createdAt         DateTime @default(now())
  productId         String
  product           Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model StripeCustomer {
  id               String @id @default(uuid())
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
